import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function createTestUser() {
  try {
    console.log('üß™ Cr√©ation d\'un utilisateur de test...');
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existing = await prisma.user.findUnique({
      where: { email: 'test@chalet-balmotte810.com' }
    });

    if (existing) {
      console.log('‚úÖ Utilisateur de test existe d√©j√†');
      console.log('- Email: test@chalet-balmotte810.com');
      console.log('- Mot de passe: test123!');
      console.log('- R√¥le:', existing.role);
      return;
    }

    // Cr√©er l'utilisateur de test
    const hashedPassword = await bcrypt.hash('test123!', 12);
    
    const testUser = await prisma.user.create({
      data: {
        email: 'test@chalet-balmotte810.com',
        password: hashedPassword,
        firstName: 'Test',
        lastName: 'User',
        phone: '+33987654321',
        role: 'client'
      }
    });

    console.log('‚úÖ Utilisateur de test cr√©√©:');
    console.log('- Email: test@chalet-balmotte810.com');
    console.log('- Mot de passe: test123!');
    console.log('- R√¥le:', testUser.role);
    
    // Tester la connexion
    console.log('\nüîê Test de connexion...');
    const isPasswordValid = await bcrypt.compare('test123!', testUser.password);
    console.log('- Mot de passe valide:', isPasswordValid ? '‚úÖ' : '‚ùå');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUser();