import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

async function debugPasswordIssue() {
  try {
    console.log('üîç Debug du probl√®me de mot de passe...\n');
    
    // R√©cup√©rer l'utilisateur admin
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@chalet-balmotte810.com' }
    });

    if (!admin) {
      console.log('‚ùå Utilisateur admin non trouv√©');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√©:');
    console.log('- Email:', admin.email);
    console.log('- Hash stock√©:', admin.password);
    console.log('- Longueur du hash:', admin.password.length);
    console.log('- Commence par $2a ou $2b:', admin.password.startsWith('$2'));

    // Tester diff√©rentes variantes du mot de passe
    const passwords = ['admin123!', 'admin123', 'Admin123!', 'ADMIN123!'];
    
    console.log('\nüîê Test des mots de passe:');
    for (const pwd of passwords) {
      try {
        const isValid = await bcrypt.compare(pwd, admin.password);
        console.log(`- "${pwd}": ${isValid ? '‚úÖ VALIDE' : '‚ùå INVALIDE'}`);
      } catch (error) {
        console.log(`- "${pwd}": ‚ùå ERREUR - ${error}`);
      }
    }

    console.log('\nüîß R√©initialisation du mot de passe...');
    
    // Cr√©er un nouveau hash avec bcryptjs
    const newPassword = 'admin123!';
    const newHash = await bcrypt.hash(newPassword, 12);
    
    console.log('- Nouveau hash:', newHash);
    console.log('- Longueur:', newHash.length);
    
    // Tester le nouveau hash avant de l'enregistrer
    const testNewHash = await bcrypt.compare(newPassword, newHash);
    console.log('- Test du nouveau hash:', testNewHash ? '‚úÖ OK' : '‚ùå ERREUR');
    
    if (testNewHash) {
      // Mettre √† jour dans la base
      await prisma.user.update({
        where: { id: admin.id },
        data: { password: newHash }
      });
      
      console.log('‚úÖ Mot de passe mis √† jour avec succ√®s!');
      
      // V√©rification finale
      const updatedAdmin = await prisma.user.findUnique({
        where: { email: 'admin@chalet-balmotte810.com' }
      });
      
      const finalTest = await bcrypt.compare('admin123!', updatedAdmin!.password);
      console.log('üéØ Test final:', finalTest ? '‚úÖ SUCCESS' : '‚ùå FAILED');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugPasswordIssue();